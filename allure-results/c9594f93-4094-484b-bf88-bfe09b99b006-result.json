{"name": "Page title Test cases", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom no such execution context: uniqueContextId not found\n  (Session info: chrome=115.0.5790.171)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF695294A62+57106]\n\t(No symbol) [0x00007FF69520CF52]\n\t(No symbol) [0x00007FF6950DE2CB]\n\t(No symbol) [0x00007FF6950CC276]\n\t(No symbol) [0x00007FF6950CA5CB]\n\t(No symbol) [0x00007FF6950CAEAE]\n\t(No symbol) [0x00007FF6950E1F17]\n\t(No symbol) [0x00007FF6950E3C5F]\n\t(No symbol) [0x00007FF6950E3D50]\n\t(No symbol) [0x00007FF69513F8EA]\n\t(No symbol) [0x00007FF69513DF60]\n\t(No symbol) [0x00007FF695136793]\n\t(No symbol) [0x00007FF69510CE81]\n\t(No symbol) [0x00007FF69510E064]\n\tGetHandleVerifier [0x00007FF695544222+2873042]\n\tGetHandleVerifier [0x00007FF695596590+3209792]\n\tGetHandleVerifier [0x00007FF69558F3AF+3180639]\n\tGetHandleVerifier [0x00007FF695325F25+652245]\n\t(No symbol) [0x00007FF695218618]\n\t(No symbol) [0x00007FF6952147C4]\n\t(No symbol) [0x00007FF6952148BC]\n\t(No symbol) [0x00007FF695204C33]\n\tBaseThreadInitThunk [0x00007FFE9CE67614+20]\n\tRtlUserThreadStart [0x00007FFE9E7626B1+33]", "trace": "browser = 'chrome'\n\n    @pytest.fixture\n    def setup(browser):\n        if browser == \"chrome\":\n            print(\"launching chrome\")\n>           driver = webdriver.Chrome()\n\ntestcases\\conftest.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:290: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000204AF589B50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom no such execut...07FF695204C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE9CE67614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE9E7626B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from no such execution context: uniqueContextId not found\nE         (Session info: chrome=115.0.5790.171)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF695294A62+57106]\nE       \t(No symbol) [0x00007FF69520CF52]\nE       \t(No symbol) [0x00007FF6950DE2CB]\nE       \t(No symbol) [0x00007FF6950CC276]\nE       \t(No symbol) [0x00007FF6950CA5CB]\nE       \t(No symbol) [0x00007FF6950CAEAE]\nE       \t(No symbol) [0x00007FF6950E1F17]\nE       \t(No symbol) [0x00007FF6950E3C5F]\nE       \t(No symbol) [0x00007FF6950E3D50]\nE       \t(No symbol) [0x00007FF69513F8EA]\nE       \t(No symbol) [0x00007FF69513DF60]\nE       \t(No symbol) [0x00007FF695136793]\nE       \t(No symbol) [0x00007FF69510CE81]\nE       \t(No symbol) [0x00007FF69510E064]\nE       \tGetHandleVerifier [0x00007FF695544222+2873042]\nE       \tGetHandleVerifier [0x00007FF695596590+3209792]\nE       \tGetHandleVerifier [0x00007FF69558F3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF695325F25+652245]\nE       \t(No symbol) [0x00007FF695218618]\nE       \t(No symbol) [0x00007FF6952147C4]\nE       \t(No symbol) [0x00007FF6952148BC]\nE       \t(No symbol) [0x00007FF695204C33]\nE       \tBaseThreadInitThunk [0x00007FFE9CE67614+20]\nE       \tRtlUserThreadStart [0x00007FFE9E7626B1+33]\n\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1691680952453, "stop": 1691680952453, "uuid": "33cbad4e-a62d-4819-999d-bcfb2163c1e7", "historyId": "b48bc54b8a9c868d329dc87029ac2201", "testCaseId": "b48bc54b8a9c868d329dc87029ac2201", "fullName": "testcases.test_orangehrm_login.Test_Orangehrm_Login#test_orangehrm_title_01", "labels": [{"name": "severity", "value": "normal"}, {"name": "story", "value": "This is story 1"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_orangehrm_login"}, {"name": "subSuite", "value": "Test_Orangehrm_Login"}, {"name": "host", "value": "DESKTOP-3IIDO4U"}, {"name": "thread", "value": "8216-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_orangehrm_login"}], "links": [{"type": "issue", "url": "ABC123", "name": "ABC123"}, {"type": "link", "url": "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login", "name": "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login"}]}